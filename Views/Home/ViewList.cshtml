@model List<AppDev.Models.MediaItem>

@{
    ViewData["Title"] = "TRACKXD";
    string currentSort = ViewData["CurrentSort"]?.ToString() ?? "Default"; // Get the current sort value
}

<div class="container mt-4">
    <h1 class="text-center" style="color: #727D73;">TRACKXD</h1>

    <!-- Success Message -->
    @if (TempData["Message"] != null)
    {
        <div class="alert alert-success text-center" role="alert">
            @TempData["Message"]
        </div>
    }

    <!-- Sorting Dropdown -->
    <div class="mb-3 text-center">
        <form method="get" asp-action="ViewList">
            <label for="sortBy" class="form-label" style="color: #727D73;">Sort By:</label>
            <select id="sortBy" name="sortBy" class="form-select w-auto d-inline-block">
                <option value="Default" selected="@((currentSort == "Default") ? "selected" : null)">Default</option>
                <option value="Year" selected="@((currentSort == "Year") ? "selected" : null)">Year Finished</option>
                <option value="Rating" selected="@((currentSort == "Rating") ? "selected" : null)">Rating</option>
                <option value="Title" selected="@((currentSort == "Title") ? "selected" : null)">Title</option>
                <option value="Class" selected="@((currentSort == "Class") ? "selected" : null)">Class</option>
            </select>
            <button type="submit" class="btn btn-primary" style="background-color: #727D73; border-color: #727D73;">Sort</button>
        </form>
    </div>

    @if (!Model.Any())
    {
        <p class="text-center mt-4" style="color: #727D73;">No media items added yet.</p>
    }
    else
    {
        <!-- Use table-responsive with no fixed width -->
        <div class="table-responsive" style="max-width: 100%; overflow-x: hidden;">
            <table class="table table-striped" style="background-color: #FFFFFF; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); width: 100%;">
                <thead class="thead-light" style="background-color: #727D73; color: #FFFFFF;">
                    <tr>
                        <th>Class</th>
                        <th>Title</th>
                        <th>Season</th>
                        <th>Year Finished</th>
                        <th>Rating</th>
                        <th>Review</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                @if (item.Class == "Movie")
                                {
                                    @:ðŸŽ¥ Movie
                                }
                                else if (item.Class == "Show")
                                {
                                    @:ðŸ“º Show
                                }
                                else if (item.Class == "Book")
                                {
                                    @:ðŸ“š Book
                                }
                            </td>
                            <td>@item.Title</td>
                            <td>@(item.Class == "Show" ? item.Season?.ToString() ?? "N/A" : "N/A")</td>
                            <td>@item.YearFinished</td>
                            <td>
                                <div style="white-space: nowrap;">
                                    @for (int i = 0; i < item.Rating; i++)
                                    {
                                        <span class="text-warning">â˜…</span>
                                    }
                                    @for (int i = item.Rating; i < 5; i++)
                                    {
                                        <span class="text-secondary">â˜…</span>
                                    }
                                </div>
                            </td>
                            <td>@(!string.IsNullOrEmpty(item.Review) ? item.Review : "No review provided.")</td>
                            <td>
                                <a href="/Home/Edit/@item.Id" class="btn btn-warning btn-sm">Edit</a>

                                <form asp-action="Delete" asp-route-id="@item.Id" method="post" class="d-inline">
                                    <button type="button" class="btn btn-danger btn-sm"
                                            onclick="return confirmDelete('@item.Title', this.form);">
                                        Delete
                                    </button>
                                </form>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Modal for delete confirmation -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationLabel">TRACKXD</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this file?
                <p id="deleteItemTitle" style="font-weight: bold;"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteButton">Delete</button>
            </div>
        </div>
    </div>
</div>

<script>
    let deleteForm;

    function confirmDelete(itemTitle, formElement) {
        // Set the item title in the modal
        document.getElementById('deleteItemTitle').textContent = "Title: " + itemTitle;

        // Save the form reference to submit later
        deleteForm = formElement;

        // Show the modal
        const deleteModal = new bootstrap.Modal(document.getElementById('deleteConfirmationModal'));
        deleteModal.show();
        return false; // Prevent the default form submission
    }

    // Attach event listener for delete confirmation
    document.getElementById('confirmDeleteButton').addEventListener('click', function () {
        if (deleteForm) {
            deleteForm.submit();
        }
    });
</script>
